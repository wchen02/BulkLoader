// Generated by CoffeeScript 1.6.1
(function() {
  var fs, loadDir, loadFile, _;

  fs = require('fs');

  _ = require('underscore');

  loadFile = function(filename, pattern, callback) {
    return fs.stat(filename, function(err, stats) {
      var loadedFile;
      if (err || !stats.isFile()) {
        if (filename === '../../') {
          filename = fileToLoad.substring(6);
        }
        return callback(new Error("An error occured while tring to require: " + filename), null, filename);
      }
      if ((filename.search(pattern)) >= 0) {
        loadedFile = require(filename);
        if (callback != null) {
          if (filename === '../../') {
            filename = fileToLoad.substring(6);
          }
          callback(null, loadedFile, filename);
        }
      }
    });
  };

  loadDir = function(filedir, pattern, callback) {
    var filenames;
    filenames = fs.readdir(filedir);
    return _.each(filenames, function(filename) {
      return this.loadFile(filename, pattern, callback);
    });
  };

  module.exports = {
    basePath: '../../',
    setBasePath: function(path) {
      if (path[path.length - 1] !== '/') {
        path += '/';
      }
      this.basePath = path;
    },
    load: function(filepaths, pattern, callback) {
      var that;
      filepaths = [].concat(filepaths);
      that = this;
      return _.each(filepaths, function(filepath) {
        if (filepath[0] !== '/') {
          filepath = that.basePath + filepath;
        }
        return fs.stat(filepath, function(err, stats) {
          if (err) {
            if (filepath === '../../') {
              filepath = filepath.substring(6);
            }
            return callback(new Error("An error occured while tring to require: " + filepath), null, filepath);
          }
          if (stats.isFile()) {
            loadFile(filepath, pattern, callback);
          }
          if (stats.isDirectory()) {
            return loadDir(filepath, pattern, callback);
          }
        });
      });
    }
  };

}).call(this);
